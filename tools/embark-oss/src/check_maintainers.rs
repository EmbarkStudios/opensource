use crate::{codeowners::CodeOwners, github, slack};
use eyre::{eyre, WrapErr};
use futures::TryFutureExt;
use itertools::Itertools;
use std::collections::HashSet;

#[derive(Debug)]
struct Project {
    name: String,
    status: Result<HashSet<String>, eyre::Report>,
}

pub async fn main(slack_webhook_url: Option<String>) -> eyre::Result<()> {
    // Download list of projects and download CODEOWNERS file for each one
    let projects = download_projects_list().await?;
    let futures = projects.into_iter().map(lookup_project);
    let projects = futures::future::join_all(futures).await;

    // Print results
    projects.iter().for_each(print_status);

    // Collected the projects with issues
    let problem_projects: Vec<_> = projects
        .into_iter()
        .filter_map(|Project { name, status }| match status {
            Ok(_) => None,
            Err(e) => Some((name, e)),
        })
        .collect();

    // If there is no problem we are done and can return
    if problem_projects.is_empty() {
        return Ok(());
    }

    // Send a message to slack if a webhook URL has been given
    if let Some(url) = slack_webhook_url {
        let blocks = slack_notification_blocks(problem_projects.as_slice());
        slack::send_webhook(&url, blocks).await?;
    }

    std::process::exit(1);
}

fn print_status(Project { name, status }: &Project) {
    match status {
        Ok(maintainers) => println!("✔️ {} ({})", name, maintainers.iter().join(", ")),
        Err(error) => print!(
            "❌ {}\n{}\n",
            name,
            crate::error::cause_string(error.as_ref(), true)
        ),
    }
}

async fn download_projects_list() -> eyre::Result<Vec<OpenSourceWebsiteProject>> {
    let data = github::download_repo_json_file::<OpenSourceWebsiteData>(
        "EmbarkStudios",
        "opensource-website",
        "main",
        "data.json",
    )
    .await
    .wrap_err("Unable to get list of open source Embark projects")?;
    Ok(data.projects)
}

async fn lookup_project(project: OpenSourceWebsiteProject) -> Project {
    let name = project.name;
    Project {
        status: lookup_project_status(&name).await,
        name,
    }
}

async fn lookup_project_status(name: &str) -> eyre::Result<HashSet<String>> {
    // Download CODEOWNERS from one of the accepted branches
    let get =
        |branch| github::download_repo_file("EmbarkStudios", name, branch, ".github/CODEOWNERS");
    let text = get("main").or_else(|_| get("master")).await?;

    // Determine if there is at least 1 primary maintainer listed for each project
    CodeOwners::new(&text)
        .wrap_err("Unable to determine maintainers")?
        .primary_maintainers()
        .cloned()
        .ok_or(eyre!("No maintainers were found for * the CODEOWNERS file"))
}

#[derive(Debug, serde::Deserialize)]
pub struct OpenSourceWebsiteData {
    projects: Vec<OpenSourceWebsiteProject>,
}

#[derive(Debug, serde::Deserialize)]
pub struct OpenSourceWebsiteProject {
    name: String,
}

fn slack_notification_blocks(projects: &[(String, eyre::Report)]) -> Vec<slack::Block> {
    use slack::Block::{Divider, Text};

    let head = "The following Embark open source projects have been found to \
have maintainership issues.";
    let foot = "This message was generated by the \
<https://github.com/EmbarkStudios/opensource/tree/main/tools/embark-oss|embark-oss tool> \
on GitHub Actions.";

    let mut blocks = Vec::with_capacity(projects.len() + 4);

    blocks.push(Text(head.to_string()));
    blocks.push(Divider);
    blocks.extend(projects.iter().map(slack_project_block));
    blocks.push(Divider);
    blocks.push(Text(foot.to_string()));
    blocks
}

fn slack_project_block((name, error): &(String, eyre::Report)) -> slack::Block {
    let text = format!(
        ":red_circle: *<https://github.com/EmbarkStudios/{name}|{name}>*\n```{error}```",
        name = name,
        error = crate::error::cause_string(error.as_ref(), false)
    );
    slack::Block::Text(text)
}
